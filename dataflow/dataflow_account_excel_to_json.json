{
	"name": "dataflow_account_excel_to_json",
	"properties": {
		"folder": {
			"name": "jupiter/initial-data-load"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AccountExcelDummy",
						"type": "DatasetReference"
					},
					"name": "CrosswalkAccount"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Account_JSON_Output_dummy",
						"type": "DatasetReference"
					},
					"name": "SinkAccountJSON"
				},
				{
					"dataset": {
						"referenceName": "Account_JSON_Output_dummy2",
						"type": "DatasetReference"
					},
					"name": "SinkValidation",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorageForCosmos",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "SelectExplicitMappingAccount"
				},
				{
					"name": "AddNestedExternalIds"
				},
				{
					"name": "DiscardNestedAccountObjectFields"
				},
				{
					"name": "AddVersionHistory"
				},
				{
					"name": "AddNestedShippingAddress"
				},
				{
					"name": "AddNestedEsbOwnerEmployee"
				},
				{
					"name": "assertMandatoryFields"
				},
				{
					"name": "filterErrors"
				},
				{
					"name": "populateCountryFields"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {SOURCE SYSTEM ID} as string,",
				"          {Overlapping Account} as string,",
				"          {Original Source System Id} as string,",
				"          {ACCOUNT GCI CODE} as string,",
				"          {Parent GCI Code} as string,",
				"          {Parent Account Name} as string,",
				"          {Parent Account GUID} as string,",
				"          {GUP Parent Account Name} as string,",
				"          {GUP Parent Account GCI Code} as string,",
				"          {GUP Parent Account GUID} as string,",
				"          {OWNER GUID} as string,",
				"          {OWNER EMPLOYEE CODES} as string,",
				"          {Account GUID} as string,",
				"          {OWNER EMAIL} as string,",
				"          {Local LCSP Email} as string,",
				"          {LCSP Employee Code} as string,",
				"          {OWNER LASTNAME} as string,",
				"          {OWNER FIRSTNAME} as string,",
				"          {GUP Client Group} as string,",
				"          DAG as string,",
				"          {Owner Id} as string,",
				"          {Account Name} as string,",
				"          {Record Type} as string,",
				"          {Parent Id} as string,",
				"          {Shipping Street} as string,",
				"          {Shipping City} as string,",
				"          {Shipping Postal Code} as string,",
				"          {Shipping State Code} as string,",
				"          {Shipping Country} as string,",
				"          Industry as string,",
				"          {DGMF Id} as string,",
				"          {DUNS Id} as string,",
				"          Program as string,",
				"          Sector as string,",
				"          {Client Type} as string,",
				"          {GUP Account Code} as string,",
				"          {Activated Member Firm} as string,",
				"          {Source Active Flag} as string,",
				"          {Sub Sector} as string,",
				"          {Client HQ} as string,",
				"          {Live in} as string,",
				"          {Access type} as string,",
				"          {Processing Status} as string,",
				"          {Number of Employees} as string,",
				"          {Person Account} as string,",
				"          {Alternative names} as string,",
				"          {Local LCSP} as string,",
				"          Description as string,",
				"          Phone as string,",
				"          Website as string,",
				"          {Responsible Office} as string,",
				"          {Company Ownership Level 1} as string,",
				"          {Company Ownership Level 2} as string,",
				"          {Company Ownership Level 3} as string,",
				"          ABN as string,",
				"          ACN as string,",
				"          {DESC Designation} as string,",
				"          {English Account Name} as string,",
				"          {English Contracting Entity Address} as string,",
				"          {Business Registration Number} as string,",
				"          {Business Registration Type} as string,",
				"          {GCI Code Update Date} as string,",
				"          {Account Id} as string,",
				"          {SIC Code} as string,",
				"          {SIC Name} as string,",
				"          {VAT Geography} as string,",
				"          {VAT ID} as string,",
				"          {MDM ID} as string,",
				"          {MDM SYNC} as string,",
				"          {Company Code} as string,",
				"          {Client Account Segmentation (US) } as string,",
				"          {Consulting Industry (US) } as string,",
				"          {Consulting Sector (US) } as string,",
				"          {Consulting Sub - Sector (US) } as string,",
				"          {Industry (US) } as string,",
				"          {Parent Account (US) } as string,",
				"          {Parent Client Industry (US) } as string,",
				"          {Parent Client Sector (US) } as string,",
				"          {Parent Client Sub - Sector (US) } as string,",
				"          {Sector (US) } as string,",
				"          {Sub - Sector (US) } as string,",
				"          {SWIFT Client ID} as string,",
				"          {GPS Client Account} as string,",
				"          {GPS Division} as string,",
				"          {GPS Sector} as string,",
				"          {GPS Sub Sector} as string,",
				"          {Growth Segment} as string,",
				"          {Sub Segment} as string,",
				"          {Abbreviated Name} as string,",
				"          {Advisory Last Reviewed Date} as string,",
				"          {Advisory MBR Checked Date} as string,",
				"          {Advisory MBR Watchlist} as string,",
				"          {Advisory Market Offering} as string,",
				"          {Advisory Notes} as string,",
				"          {Advisory Watchlist Priority} as string,",
				"          {Consulting Last Reviewed Date} as string,",
				"          {Consulting MBR Checked Date} as string,",
				"          {Consulting MBR Watchlist} as string,",
				"          {Consulting Network} as string,",
				"          {Consulting Notes} as string,",
				"          {Consulting Watchlist Priority} as string,",
				"          {Deloitte Margin Target (%) } as string,",
				"          {Deloitte Margin Threshold (%) } as string,",
				"          {Deloitte Purchase Discount (%) } as string,",
				"          Domain as string,",
				"          {Inactive Date} as string,",
				"          {Independence Clearance?} as string,",
				"          {Is Provider?} as string,",
				"          {Is Supplier?} as string,",
				"          {Legal Name - Resell Contracts} as string,",
				"          {Number of Contacts} as string,",
				"          {Parent Legal Entity} as string,",
				"          {Point of Contact} as string,",
				"          {Provider Quote Name} as string,",
				"          {Public / Private} as string,",
				"          {Resell Comments} as string,",
				"          {Restrict Access to this Account} as string,",
				"          {Sell To} as string,",
				"          {Supplier Quote Name} as string,",
				"          {Tax Last Reviewed Date} as string,",
				"          {Tax MBR Checked Date} as string,",
				"          {Tax MBR Watchlist} as string,",
				"          {Tax Notes} as string,",
				"          {Tax Watchlist Priority} as string,",
				"          {EGC Strategic Investor (US)} as string,",
				"          {Lead Portfolio Partner (US)} as string,",
				"          {M&A Relationship PPMD (US)} as string,",
				"          {Audit NR 2 Previous FY (US)} as string,",
				"          {Audit NR Current FY YTD (US)} as string,",
				"          {Audit NR Previous FY (US)} as string,",
				"          {Consulting NR 2 Previous FY (US)} as string,",
				"          {Consulting NR Current FY YTD (US)} as string,",
				"          {Consulting NR Previous FY (US)} as string,",
				"          {FY17 Relationship (US)} as string,",
				"          {RFA NR 2 Previous FY (US)} as string,",
				"          {RFA NR Current FY YTD (US)} as string,",
				"          {RFA NR Previous FY (US)} as string,",
				"          {Tax NR 2 Previous FY (US)} as string,",
				"          {Tax NR Current FY YTD (US)} as string,",
				"          {Tax NR Previous FY (US)} as string,",
				"          {Local Parent Account} as string,",
				"          {Error Message} as string,",
				"          currency as string,",
				"          region as string,",
				"          gupSICName as string,",
				"          {DTTL Geography} as string,",
				"          {All Confidential Opportunities} as string,",
				"          {Address State Province Name} as string,",
				"          {Address Country Code} as string,",
				"          gupEnglishAccountName as string,",
				"          gupIndustry as string,",
				"          gupSubSector as string,",
				"          gupSector as string,",
				"          {versionHistory.created} as string,",
				"          {versionHistory.createdBy} as string,",
				"          {versionHistory.lastModified} as string,",
				"          {versionHistory.lastModifiedBy} as string,",
				"          {versionHistory.createdEmployeeCode} as string,",
				"          {versionHistory.modifiedEmployeeCode} as string,",
				"          {versionHistory.createdBy.email} as string,",
				"          {versionHistory.createdBy.firstName} as string,",
				"          {versionHistory.createdBy.lastName} as string,",
				"          {versionHistory.createdBy.country} as string,",
				"          {versionHistory.lastModifiedBy.email} as string,",
				"          {versionHistory.lastModifiedBy.firstName} as string,",
				"          {versionHistory.lastModifiedBy.lastName} as string,",
				"          {versionHistory.lastModifiedBy.country} as string,",
				"          {Owner.email} as string,",
				"          {Owner.firstName} as string,",
				"          {Owner.lastName} as string,",
				"          {Owner.country} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CrosswalkAccount",
				"CrosswalkAccount select(mapColumn(",
				"          accountGuid = {ACCOUNT GCI CODE},",
				"          {externalIds.dunsId} = {DUNS Id},",
				"          {externalIds.dgmfId} = {DGMF Id},",
				"          {externalIds.jupiterId} = {Account GUID},",
				"          dataAdministrationGroup = DAG,",
				"          accountName = {Account Name},",
				"          accountAlias = {Alternative names},",
				"          ownerGuid = {OWNER GUID},",
				"          parentGuid = {Parent Account GUID},",
				"          industry = Industry,",
				"          sector = Sector,",
				"          accountProgram = Program,",
				"          accountHeadquarters = {Client HQ},",
				"          {shippingAddress.addressLine1} = {Shipping Street},",
				"          {shippingAddress.city} = {Shipping City},",
				"          {shippingAddress.postalCode} = {Shipping Postal Code},",
				"          {shippingAddress.stateProvince} = {Shipping State Code},",
				"          {shippingAddress.country} = {Address Country Code},",
				"          accountType = {Client Type},",
				"          recordType = {Record Type},",
				"          memberFirmCode = {Activated Member Firm},",
				"          accessType = {Access type},",
				"          subsector = {Sub Sector},",
				"          masteredInJupiter = {Overlapping Account},",
				"          gupClientGroup = {GUP Client Group},",
				"          DESCDesignation = {DESC Designation},",
				"          englishAccountName = {English Account Name},",
				"          englishContactingEntityAddress = {English Contracting Entity Address},",
				"          ownerEmployeeCode = {OWNER EMPLOYEE CODES},",
				"          salesforceId = {Account Id},",
				"          globalUltimateParentName = {GUP Parent Account Name},",
				"          gupGuid = {GUP Account Code},",
				"          localLCSP = {LCSP Employee Code},",
				"          liveInJupiter = {Live in},",
				"          numberOfEmployees = {Number of Employees},",
				"          accountDescription = Description,",
				"          phone = Phone,",
				"          accountWebsite = Website,",
				"          responsibleRegion = {Responsible Office},",
				"          companyOwnershipLevel1 = {Company Ownership Level 1},",
				"          companyOwnershipLevel2 = {Company Ownership Level 2},",
				"          companyOwnershipLevel3 = {Company Ownership Level 3},",
				"          ABN,",
				"          ACN,",
				"          businessRegistraionNumber = {Business Registration Number},",
				"          businessRegistraionType = {Business Registration Type},",
				"          sicCode = {SIC Code},",
				"          sicName = {SIC Name},",
				"          VATGeography = {VAT Geography},",
				"          VATId = {VAT ID},",
				"          ownerEmail = {OWNER EMAIL},",
				"          ownerFirstName = {OWNER FIRSTNAME},",
				"          ownerLastName = {OWNER LASTNAME},",
				"          ownerCountry = {Owner.country},",
				"          currency,",
				"          gupEnglishAccountName,",
				"          gupIndustry,",
				"          gupSector,",
				"          gupSubSector,",
				"          region,",
				"          {versionHistory.created},",
				"          {versionHistory.createdBy},",
				"          {versionHistory.createdBy.email},",
				"          {versionHistory.createdBy.firstName},",
				"          {versionHistory.createdBy.lastName},",
				"          {versionHistory.createdBy.country},",
				"          {versionHistory.lastModified},",
				"          {versionHistory.lastModifiedBy},",
				"          {versionHistory.lastModifiedBy.email},",
				"          {versionHistory.lastModifiedBy.firstName},",
				"          {versionHistory.lastModifiedBy.lastName},",
				"          {versionHistory.lastModifiedBy.country},",
				"          {versionHistory.createdEmployeeCode},",
				"          {versionHistory.modifiedEmployeeCode},",
				"          errorMessage = {Error Message},",
				"          sourceSystemId = {SOURCE SYSTEM ID}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectExplicitMappingAccount",
				"AddNestedEsbOwnerEmployee derive(externalIds = @(jupiterId={externalIds.jupiterId},",
				"          dunsId={externalIds.dunsId},",
				"          dgmfId={externalIds.dgmfId})) ~> AddNestedExternalIds",
				"AddVersionHistory select(mapColumn(",
				"          accountGuid,",
				"          externalIds,",
				"          dataAdministrationGroup,",
				"          accountName,",
				"          accountAlias,",
				"          ownerGuid,",
				"          parentGuid,",
				"          industry,",
				"          sector,",
				"          accountProgram,",
				"          region,",
				"          accountHeadquarters,",
				"          shippingAddress,",
				"          currency,",
				"          accountType,",
				"          recordType,",
				"          versionHistory,",
				"          accessType,",
				"          subsector,",
				"          accountDescription,",
				"          numberOfEmployees,",
				"          phone,",
				"          accountWebsite,",
				"          masteredInJupiter,",
				"          companyOwnershipLevel1,",
				"          companyOwnershipLevel2,",
				"          companyOwnershipLevel3,",
				"          gupClientGroup,",
				"          ABN,",
				"          ACN,",
				"          DESCDesignation,",
				"          englishAccountName,",
				"          englishContactingEntityAddress,",
				"          businessRegistraionNumber,",
				"          businessRegistraionType,",
				"          ownerEmployeeCode,",
				"          localLCSP,",
				"          salesforceId,",
				"          responsibleRegion,",
				"          globalUltimateParentName,",
				"          gupEnglishAccountName,",
				"          VATId,",
				"          VATGeography,",
				"          sicName,",
				"          sicCode,",
				"          gupIndustry,",
				"          gupSector,",
				"          gupSubSector,",
				"          gupGuid,",
				"          esbOwnerEmployee",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DiscardNestedAccountObjectFields",
				"AddNestedExternalIds derive(versionHistory = @(created=toString(toTimestamp({versionHistory.created}, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\''),",
				"          createdBy={versionHistory.createdBy},",
				"          createdEmployeeCode={versionHistory.createdEmployeeCode},",
				"          lastModified=toString(toTimestamp({versionHistory.lastModified}, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\''),",
				"          lastModifiedBy={versionHistory.lastModifiedBy},",
				"          modifiedEmployeeCode={versionHistory.modifiedEmployeeCode},",
				"          esbCreatedEmployee=@(code={versionHistory.createdEmployeeCode},",
				"          email={versionHistory.createdBy.email},",
				"          firstName={versionHistory.createdBy.firstName},",
				"          lastName={versionHistory.createdBy.lastName},",
				"          country={versionHistory.createdBy.country}),",
				"          esbModifiedEmployee=@(code={versionHistory.modifiedEmployeeCode},",
				"          email={versionHistory.lastModifiedBy.email},",
				"          firstName={versionHistory.lastModifiedBy.firstName},",
				"          lastName={versionHistory.lastModifiedBy.lastName},",
				"          country={versionHistory.lastModifiedBy.country}))) ~> AddVersionHistory",
				"filterErrors derive(shippingAddress = @(addressLine1=case(isNull({shippingAddress.addressLine1}),'', {shippingAddress.addressLine1}),",
				"          city={shippingAddress.city},",
				"          stateProvince={shippingAddress.stateProvince},",
				"          postalCode={shippingAddress.postalCode},",
				"          country={shippingAddress.country})) ~> AddNestedShippingAddress",
				"AddNestedShippingAddress derive(esbOwnerEmployee = @(code=ownerEmployeeCode,",
				"          email=ownerEmail,",
				"          firstName=ownerFirstName,",
				"          lastName=ownerLastName,",
				"          country=ownerCountry)) ~> AddNestedEsbOwnerEmployee",
				"populateCountryFields assert(expectTrue(and(!isNull(accountName), !equals(trim(toString(accountName)),'')), false, 'assertAccountName', null, 'accountName is a mandatory field'),",
				"     expectTrue(and(!isNull(industry), !equals(trim(toString(industry)),'')), false, 'assertIndustry', null, 'industry is a mandatory field'),",
				"     expectTrue(and(!isNull(sector), !equals(trim(toString(sector)),'')), false, 'assertSector', null, 'sector is a mandatory field'),",
				"     expectTrue(and(!isNull(subsector), !equals(trim(toString(subsector)),'')), false, 'assertSubsector', null, 'subsector is a mandatory field'),",
				"     expectTrue(and(!isNull({shippingAddress.addressLine1}), !equals(trim(toString({shippingAddress.addressLine1})),'')), false, 'assertShippingAddress.addressLine1', null, {shippingAddress.addressLine1} + ' is a mandatory field'),",
				"     expectTrue(and(!isNull({shippingAddress.city}), !equals(trim(toString({shippingAddress.city})),'')), false, 'assertShippingAddress.city', null, {shippingAddress.city} + ' is a mandatory field'),",
				"     expectTrue(and(!isNull({shippingAddress.postalCode}), !equals(trim(toString({shippingAddress.postalCode})),'')), false, 'assertShippingAddress.postalCode', null, {shippingAddress.postalCode} + ' is a mandatory field'),",
				"     expectTrue(and(!isNull({shippingAddress.country}), !equals(trim(toString({shippingAddress.country})),'')), false, 'assertShippingAddress.country', null, {shippingAddress.country} + ' is a mandatory field'),",
				"     expectTrue(and(!isNull(currency), !equals(trim(toString(currency)),'')), false, 'assertCurrency', null, 'currency is a mandatory field'),",
				"     expectTrue(and(!isNull(ownerEmployeeCode), !equals(trim(toString(ownerEmployeeCode)),'')), false, 'assertOwnerEmployeeCode', null, 'ownerEmployeeCode is a mandatory field'),",
				"     expectTrue(and(!isNull(ownerEmail), !equals(trim(toString(ownerEmail)),'')), false, 'assertOwnerEmployeeEmail', null, 'ownerEmail is a mandatory field'),",
				"     expectTrue(and(!isNull(ownerFirstName), !equals(trim(toString(ownerFirstName)),'')), false, 'assertOwnerEmployeeFirstName', null, 'ownerFirstName is a mandatory field'),",
				"     expectTrue(and(!isNull(ownerLastName), !equals(trim(toString(ownerLastName)),'')), false, 'assertOwnerEmployeeLastName', null, 'ownerLastName is a mandatory field'),",
				"     expectTrue(and(!isNull(ownerCountry), !equals(trim(toString(ownerCountry)),'')), false, 'assertOwnerEmployeeCountry', null, 'ownerCountry is a mandatory field'),",
				"     expectTrue(and(!isNull(accountGuid), !equals(trim(toString(accountGuid)),'')), false, 'assertAccountGuid', null, 'accountGuid is a mandatory field')) ~> assertMandatoryFields",
				"assertMandatoryFields filter(!isError(1)) ~> filterErrors",
				"SelectExplicitMappingAccount derive(ownerCountry = iif(in(array('jupitermfsupport@deloitte.com','schilupuri@deloitte.com','sandbala@deloitte.com','inactiveuser@example.com'), ownerEmail), 'US', ownerCountry),",
				"          {versionHistory.lastModifiedBy.country} = iif(in(array('jupitermfsupport@deloitte.com','schilupuri@deloitte.com','sandbala@deloitte.com','inactiveuser@example.com'), {versionHistory.lastModifiedBy.email}), 'US', {versionHistory.lastModifiedBy.country}),",
				"          {versionHistory.createdBy.country} = iif(in(array('jupitermfsupport@deloitte.com','schilupuri@deloitte.com','sandbala@deloitte.com','inactiveuser@example.com'), {versionHistory.createdBy.email}), 'US', {versionHistory.createdBy.country})) ~> populateCountryFields",
				"DiscardNestedAccountObjectFields sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          StudentID as string,",
				"          StudentName as string,",
				"          MentorID as string,",
				"          DateofBirth as string,",
				"          Gender as string,",
				"          City as string,",
				"          Country as string,",
				"          Longtitude as string,",
				"          Latitude as string,",
				"          Guardian as string,",
				"          ContactNumber as string,",
				"          Address as string,",
				"          {SchoolEnrolled } as string,",
				"          StartDate as string,",
				"          {SpokenLanguage } as string,",
				"          {WrittenLanguage } as string,",
				"          Favoritesubject as string,",
				"          CareerAspiration as string,",
				"          Background as string,",
				"          ContactEmail as string",
				"     ),",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('roundRobin', 48)) ~> SinkAccountJSON",
				"assertMandatoryFields sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          StudentID as string,",
				"          StudentName as string,",
				"          MentorID as string,",
				"          DateofBirth as string,",
				"          Gender as string,",
				"          City as string,",
				"          Country as string,",
				"          Longtitude as string,",
				"          Latitude as string,",
				"          Guardian as string,",
				"          ContactNumber as string,",
				"          Address as string,",
				"          {SchoolEnrolled } as string,",
				"          StartDate as string,",
				"          {SpokenLanguage } as string,",
				"          {WrittenLanguage } as string,",
				"          Favoritesubject as string,",
				"          CareerAspiration as string,",
				"          Background as string,",
				"          ContactEmail as string",
				"     ),",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkValidation"
			]
		}
	}
}